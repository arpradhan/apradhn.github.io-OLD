<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abhijit Pradhan's blog]]></title>
  <link href="http://apradhn.github.io/atom.xml" rel="self"/>
  <link href="http://apradhn.github.io/"/>
  <updated>2015-07-07T01:59:46-04:00</updated>
  <id>http://apradhn.github.io/</id>
  <author>
    <name><![CDATA[Abhijit Pradhan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kurt Vonnegut and Software Design]]></title>
    <link href="http://apradhn.github.io/blog/2015/07/07/kurt-vonnegut-and-software-design/"/>
    <updated>2015-07-07T01:00:31-04:00</updated>
    <id>http://apradhn.github.io/blog/2015/07/07/kurt-vonnegut-and-software-design</id>
    <content type="html"><![CDATA[<p>As an English major, I'm always trying to draw parallels between software design and literary criticism. Additionally, studying code everyday a Flatiron has pushed me to relate more abstract concepts to software design. Spurred by a reddit post about Kurt Vonnegut's "8 Basics of Creative Writing", I couldn't help but draw parallels between Vonnegut's rules and patterns of good software design. Kurt Vonnegut is a good writer to take software design inspiration from because his writing reflects a spare, concise style devoid of ornamentation. Addtionally, I've started reading <strong>Practical Object-Oriented Design in Ruby</strong> which discusses what it means for a software design pattern to be "good". What follows below is my best attempt to map Vonnegut's principles of writing to principles of good software design.</p>


<ol>
  <li><strong>Use the time of a total stranger in such a way that he or she will not feel the time was wasted</strong></li>
  <br>
  <p>To me, this rule says that no line of code of should be wasted. For example, does your method need to store local data, if it's purpose is to return that same data? All methods in ruby return the statement executed on the last line, so you do not always need to store data to a local variable in order to return it. If you do store data to a local variable, ensure that you do so for a reason. Otherwise, needlessly storing local data makes your code harder to read and harder to maintain.</p>
  <li><strong>Give the reader at least one character he or she can root for.</strong></li>
  <br>
  <p>Okay, this is going to be a stretch, but I feel like this rule relates to the Single Responsibility Principle. The Single Responsibility Principle states that every class should have responsibility over a single part of the functionality of provided by the software. Not only does SRP make reading code easier, but it helps improves software by segmenting processes of a software into singular action. If one process breaks, you can quickly see where the error is happening, instead of having to read through the code of your entire application. It seems to me that any given method should ideally interact with one piece of data.</p>
  <li><strong>Every character should want something, even if it is only a glass of water</strong></li>
  <br>
  <p>To me, this means that every method must return something useful, even if it's nil. The true potential of Object-Oriented Design only becomes unleashed if you assume that all methods of all classes return something to other objects. Even seemingly unimportant values like nil are important to return, because they tell us valuable information about the receiver. Returning nil is essential when our receiver is not compatible with the method called upon it, otherwise we may not catch the error until it pops up farther down pipeline.</p>
  <li><strong>Every sentence must do one of two things--reveal character or advance action</strong></li>
  <br>
  <p>
    This is the writing rule I saw on Reddit that prompted this post. This rule reinforces that there should be no unnecessary line of code, i.e. Do Not Repeat Yourself. The best code is code that can be built upon by future developers, for whatever they want to use your code for. Therefore, your code is actually telling a story to both the compiler and the human reading it. Every class must have a purpose for existing, and every method must have a necessary impact on the user experience. Anytime you write a method, you must ask yourself why must this be an instance method or class method? If more than one class share the same method, it's almost always a good idea to place it inside a module. Anyone reading your code will assume that you wrote everything for a particular reason, so you should think about how unused or unnecessary code obsfuscates meaning. Additionally, I feel that naming conventions for variables are just as important. Would the Great Gatsby have been as moving a novel if it were named the Satisfactory Gatsby? If i see a local variable in your code, the best way i can infer its purpose is from its name.
  </p>
  <li><strong>Start as Close to the End as Possible</strong></li>
  <br>
  <p>Agile Software Development is a collection of software development practices developed by Rubyists to enhance software deisgn patterns and productivity that has since been adopted by the tech-world at large. The first principle of Agile stresses delivering customer satisfaction through iterative development. What this means is that you should build your software bit by bit, developing the next most observable unit of progress. Our labs have a fairly straightforward linear progression, but in the real world, you cannot fathom what direction your software will grow into. By building an application incrementally, you get an organic sense of the how the final product should look and feel to the end-user, and it's easier for you diagnose and fix issues.</p>
  <li><strong>Be a sadist. No Matter how sweet and innocent your leading characters, make awful things happen to them--in order to that the reader may see what they are made of.</strong></li>
  <br>
  <p>Okay, this is going to be another stretch. Write your classes with confidence. Write your classes in such a way that that they can smash into each other in unpredictable ways and yet yield no errors. Classes that are written in a flexible manner encourage experimentation, and thus encourage more creative software. Be willing to shift the focus of your application from one class to another, as the occaision sees fit.</p>
  <li><strong>Write to please just one person. If you open a window and make love to the world, so to speak, your story will get pneumonia</strong></li>
  <br>
  <p>Write code that solves immediate problems. Do not write code that might possibly solve problems that do not exist yet. Code that is written to solve problems that does not exist discourages experimentation. Refactor your code for the problems that immediately present it.</p>
  <li><strong>Give your readers as much information as possible as soon as possible. To heck with suspense. Readers should have such complete understanding of what is going on, where and why, that they could finish the story themselves, should cockaroaches eat the last few pages.</strong></li>
  <br>
  <p>When I read this rule, the first thing that leaps to mind is "Convention Over Configuration", one of the guiding principles behind Ruby on Rails. Your classes should have an interface that is easy for another developer to play around with. There's actually quite a bit of power behind this statement. Convention is like an implicit language between the lines of code that is readable only by humans. Computers do not require CRUD operations. We implement CRUD operations in software design because it is a familiar heurisitic for the most common interactions users have with data. Much of magic syntactical sugar of rails comes from this idea that there is a conventional way of building the basic elements of a web application. When developers share this understanding, it empowers us all to build bigger and more beautiful things, instead of wasting time explaining ourselves.</p>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons in Software Design From Super Metroid]]></title>
    <link href="http://apradhn.github.io/blog/2015/06/22/user-experience-lessons-from-metroid-prime/"/>
    <updated>2015-06-22T00:18:35-04:00</updated>
    <id>http://apradhn.github.io/blog/2015/06/22/user-experience-lessons-from-metroid-prime</id>
    <content type="html"><![CDATA[<p>Over the past few days at Flatiron, I&rsquo;ve though a lot about how the video games I played as a kid has informed the way I think about designing software. Each week we&rsquo;ve been introduced to a new concept, from loops, to object oriented design to databases, and it helped to digest those concepts by thinking about those concepts in in the form of video games. However, I think some older video still have a few lessons to teach to modern software design. In particular, Metroid Prime came to mind.</p>

<p>I grew up with a Sega Genesis so only recently have I been able to play some of the classic Super Nintendo games, particularly the games produced in-house by Nintendo. Games like Earthbound and Super Metroid struck me for their immersive user experiences. Thanks to Apple and Google, the average consumer has high standards for user experience compared to software products of the 80s and 90s. From my personal experience, using a computer in the 90s felt like a chore, like I was using something designed primarily to make spreadsheets. But despite the limited technology of the time, Nintendo was able to craft delightful software that could sustain your attention span for hours.</p>

<p>Of all the games I&rsquo;ve played recently however, Metroid Prime stood out as a game with exceptional trust in the user&rsquo;s ability to navigate a piece of software. For that reason, I wanted to spend some time thinking about what lessons we could learn from it to apply to software design. Caveat: I still haven&rsquo;t beaten this game, and it&rsquo;s kind of insane they expected a child to beat this thing without looking for help on the internet.</p>

<p>&lt;<img src="http://static.giantbomb.com/uploads/original/0/2627/575576-metroid_map1.jpg" alt=""></p>

<h2>Separation of Concerns</h2>

<p>Super Metroid puts you in control of an interplanetary bounty hunter, but little of it actually involves shooting stuff. Most of the time you guide Samus through the caverns of alien planet looking for new weapons or a boss battle. For a game that mostly involves running around, keeping the player&rsquo;s position in perspective poses a huge design challenge. Nintendo solves this problem by giving each of the five or so zones a unique look and feel. Moreover, each room of the game has a unique architecture. This is especially important for a game like Metroid Prime, that relies heaviy on exploration an puzzle solving. One of the factors that makes Metroid Prime a class is that there is no wasted pixel. There is no obstacle thoughtlessly placed, no ledge or secret passage way randomly programmed. It&rsquo;s easy to get lost in Metroid Prime, but not impossible to find your way out.</p>

<p><img src="http://resource.mmgn.com/Games/Wii/large/Super-Metroid-5.jpg" alt=""></p>

<h2>Domain Modeling</h2>

<p>Solving puzzles in Super Metroid involves some variation on shooting or blowing things up. While this doesn&rsquo;t resemble a specific real-world analog, it does provide a meaningful design language. In this case, Nintendo exploits the very basic expectation between action and reaction. Very early on, you learn that Samus has to shoot doors with her blaster in order for them to open. Then you find out that green doors don&rsquo;t open when you shoot them. Expectation: you need to shoot them with something else. Eventually you find missles that do such a job. Later you find blocks engraved with symbols similar to the bombs you can drop. No surprise, you can blow them up with your bombs. Every interaction with the environment in Metroid Prime is meticulously planned. The lesson here is to provide meaningful feedback to every user interaction in your design. Don&rsquo;t mislead the user with flashy animations, make a deliberate choice for every possible way a user can interact with your product.</p>

<p><img src="http://199.101.98.242/media/images/35792-Super_Metroid_(Europe)_(En,Fr,De)-10.jpg" alt=""></p>

<h2>Know Thy User</h2>

<p>The big secret about Super Metroid is that it gets easier the more you play it. It&rsquo;s never as hard as when you first step outside the spaceship, nary a super bomb. Over time you accumulate weapons, and master the environment, learning the ins and outs of the game. It&rsquo;s not really a secret, as pretty much any game that implements character development uses this pattern, from Final Fantasy to Arkham City. The trick is balancing how you empower the user. Super Metroid draws the problem-solvers with a sci-fi leaning. They reward intelligence by giving Samus bigger and better weapons, and health bonuses. The boss battles are noteworthy too. Too many games of this era punish the user for simply getting to the end. But each boss in Super Metroid behaves with a clear pattern. Additionally, Super Metroid grants you just enough health points, and places save points close by, to give the user more opportunities to experiment with different strategies. Fighting the bosses in Super Metroid feels like learning, where other boss battles of the era simply reward fast reflexes, luck, and what pixel you happen to be standing on.Empower them too quickly, and they grow bored. Empower them too slow, and you lose their attention. Games like Temple Run and Flappy Bird may seem dumb to many, but they remain immensely popular because each time you fail, you feel that it was your fault.</p>

<h2>Conclusion</h2>

<p>The lesson for non-game apps is that you need to respect the intelligence and the attention span of your audience. Do not overload them with an abundance of choices to show off the nifty features of your app. Create a story that guides their eyeball to the necessary info. If you have a lot of features, make the user feel like they are discovering the app themselves. If your app is not a video game, no one is using your app because it&rsquo;s pretty, they want to get something out of it. Whether it&rsquo;s Google Maps, or Tinder the design of user experience works because they have an intimate understanding of their user base. To spec buffs, these details may seem unimportant, but its the small details that make that make software distinguish itself from copycats.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun With Enumerables]]></title>
    <link href="http://apradhn.github.io/blog/2015/06/09/fun-with-enumerables/"/>
    <updated>2015-06-09T20:59:28-04:00</updated>
    <id>http://apradhn.github.io/blog/2015/06/09/fun-with-enumerables</id>
    <content type="html"><![CDATA[<p>Over the last few days I've started experimenting with Enumerables. Nearly every lab required iterating through an array or hash in order to crunch some kind of data, so it made sense to use to utilize Ruby's built-in methods for Enumerble rather than push values to empty array inside an <code>#each</code> loop.</p>




<p>For example, the first function for holiday.rb of the Apples and Holidays lab requires you to add the supply argument to the each of the winter holidays. To solve this, I looped through the winter hash of the holiday hash, and pushed the new supply to the end of each supply array. Lastly, I entered holiday_hash as the last line of the method so that it would return the updated hash to the program, like so:</p>


<p><code>
holiday_hash[:winter].each do |holiday, supplies|
  supplies &lt;&lt; supply
end
holiday_hash
</code></p>

<p> <p>Since I was returning a hash with identical keys, I realized I could shorten the method by using <code>#collect,</code> like so:</p></p>

<p><code>
holiday_hash[:winter].collect {|holiday, supplies| supplies &lt;&lt; supply }
</code></p>

<p>Last week in the iteration lecture, Avi said something like "Every time you want a return a new array that is identical in size to the array you are iterating through, you probably want to use #collect". Since then I've been trying to replace unnecessary #each loops with #collect and in the process found out about some pretty useful enumerables to quickly return data from an array or hash. I learned that #find, #any?, and #select are powerful enumerables for completing some of the most common processes you want to do with an array or hash. So I wanted to spend some time exploring the rest of the Enumerable catalog to see what else could help me get data from an array/hash</p>




<h3>#count</h3>




<p>Not all enumerables return an array/hash. They can also return boolean values, and in the case of <code>#count</code>, a single number. <code>#count</code> returns a number equal to the amount of times the expression in the block evaluates to true. For example, how many times "raccoon" appears in an array of animals. At least 2 or 3 of the labs required us to get a count of how many times an element recurred in array or hash. This is how you would simulate #count using <code>#each</code>: </p>


<p><code>
animals = [&ldquo;fox&rdquo;, &ldquo;swan&rdquo;, &ldquo;raccoon&rdquo;, &ldquo;turtle&rdquo;, &ldquo;iguana&rdquo;, &ldquo;raccoon&rdquo;]<br>
count = 0<br>
animals.each do |animal|<br>
&nbsp;&nbsp;if animal == &ldquo;raccoon&rdquo;<br>
&nbsp;&nbsp;&nbsp;&nbsp;count += 1<br>
&nbsp;&nbsp;end<br>
end<br>
count<br>
</code></p>

<p><code>#count</code> accomplishes the same logic in a single line:
<br><code>animals.count{|animal| animal == &ldquo;raccoon&rdquo;}</code></p>

<h3>#none?</h3>


<p>Sometimes you just want to make sure that a value doesn&rsquo;t exist in your array/hash</p>

<p><code>
animals = {<br>
&nbsp;&nbsp;fox: {class: &ldquo;mammalia&rdquo;}, <br>
&nbsp;&nbsp;lobster: {class: &ldquo;crustacea&rdquo;}, <br>
&nbsp;&nbsp;eagle: {class: &ldquo;aves&rdquo;}, <br>
&nbsp;&nbsp;toad: {class: &ldquo;amphibia&rdquo;}}<br>
<br>
animals.none?{|animal, properties| properties[:class] == &ldquo;reptilia&rdquo;} <br> #=> true
 </code></p>

<p><code>#none</code> returns true because no animal has a class of repitilia</p>




<h3>#one?</h3>




<p><code>#one?</code> is a strange enumerator that does exactly what it sounds like it does: returns true if only one expression in the block evaluates to true</p>


<p><code>
animals.one?{|animal, properties| properties[:class] == &ldquo;aves&rdquo;} #=> true
</code></p>

<h3>#partition</h3>


<p><code>#partition</code> is even stranger, because it returns two arrays, one for which the expression in the block evaluates to true, and the other for false. Say I have an arrays of dinosaur hashes, I can use partition to split it into an array of Jurassic and Cretaceous dinosaurs: </p>


<p><code>
dinosaurs = [<br>
&nbsp;&nbsp;{name: &ldquo;Tyrannosaurus&rdquo;, era: &ldquo;Cretaceous&rdquo;},<br>
&nbsp;&nbsp;{name: &ldquo;Velociraptor&rdquo;, era: &ldquo;Cretaceous&rdquo;},<br>
&nbsp;&nbsp;{name: &ldquo;Pterodactylus&rdquo;, era: &ldquo;Jurassic&rdquo;},<br>
&nbsp;&nbsp;{name: &ldquo;Brachiosaurus&rdquo;, era: &ldquo;Jurassic&rdquo;},<br>
&nbsp;&nbsp;{name: &ldquo;Triceratops&rdquo;, era: &ldquo;Cretaceous&rdquo;},<br>
&nbsp;&nbsp;{name: &ldquo;Stegasaurus&rdquo;, era: &ldquo;Jurassic&rdquo;},<br>
&nbsp;&nbsp;{name: &ldquo;Dilophosaurus&rdquo;, era: &ldquo;Jurassic&rdquo;}<br>
]<br>
<br>
dinosaurs.partition{|dino, properties| properties[:era] == &ldquo;Jurassic&rdquo;}<br> #=><br/>
[<br>
&nbsp;&nbsp;[{:name=>&ldquo;Pterodactylus&rdquo;, :era=>&ldquo;Jurassic&rdquo;},<br>
&nbsp;&nbsp;{:name=>&ldquo;Brachiosaurus&rdquo;, :era=>&ldquo;Jurassic&rdquo;},<br>
&nbsp;&nbsp;{:name=>&ldquo;Stegasaurus&rdquo;, :era=>&ldquo;Jurassic&rdquo;},<br>
&nbsp;&nbsp;{:name=>&ldquo;Dilophosaurus&rdquo;, :era=>&ldquo;Jurassic&rdquo;}],<br>
<br>
&nbsp;&nbsp;[{:name=>&ldquo;Tyrannosaurus&rdquo;, :era=>&ldquo;Cretaceous&rdquo;},<br>
&nbsp;&nbsp;{:name=>&ldquo;Velociraptor&rdquo;, :era=>&ldquo;Cretaceous&rdquo;},<br>
&nbsp;&nbsp;{:name=>&ldquo;Triceratops&rdquo;, :era=>&ldquo;Cretaceous&rdquo;}]<br>
]</code></p>

<h3>#find_all</h3>




<p><code>#find_all</code> is kind of like <code>#find</code>, except it returns an array containing of all the elements of a collection for which the expression in the block evaluates to true. This is handy in situations where you need to grab all the values from a list that match a specific value. In the following example, I use <code>#find_all</code> to get a list of all the kaiju that first premiered between 1965 and 1975:</p>


<p><code>
kaiju = [<br>
&nbsp;&nbsp;{name: &ldquo;Godzilla&rdquo;, year: 1954},<br>
&nbsp;&nbsp;{name: &ldquo;Anguiris&rdquo;, year: 1955},<br>
&nbsp;&nbsp;{name: &ldquo;Rodan&rdquo;, year: 1956},<br>
&nbsp;&nbsp;{name: &ldquo;Mothra&rdquo;, year: 1961},<br>
&nbsp;&nbsp;{name: &ldquo;King Ghidorah&rdquo;, year: 1964},<br>
&nbsp;&nbsp;{name: &ldquo;Gigan&rdquo;, year: 1972},<br>
&nbsp;&nbsp;{name: &ldquo;Mothra&rdquo;, year: 1961},<br>
&nbsp;&nbsp;{name: &ldquo;Mechagodzilla&rdquo;, year: 1974},<br>
&nbsp;&nbsp;{name: &ldquo;Destoroyah&rdquo;, year: 1995},<br>
&nbsp;&nbsp;{name: &ldquo;Biollante&rdquo;, year: 1989},<br>
&nbsp;&nbsp;{name: &ldquo;Gezora&rdquo;, year: 1971}<br>
]<br>
kaiju.find_all {|k| k[:year] > 1965 &amp;&amp; k[:year] &lt; 1975 } #=> [<br>
&nbsp;&nbsp;{:name=>&ldquo;Gigan&rdquo;, :year=>1972}, <br>
&nbsp;&nbsp;{:name=>&ldquo;Mechagodzilla&rdquo;, :year=>1974}, <br>
&nbsp;&nbsp;{:name=>&ldquo;Gezora&rdquo;, :year=>1971}<br>]
</code></p>

<h3>#group_by</h3>




<p><code>#group_by</code> is a super powerful enumerable that allows you to reconstruct a collection based on the value in the block. when you use group_by on a collection, it will return a hash with keys named after the value in the block. I imagine that group_by is useful when you have an array or hashes with recurring values. For example, you can reorder an array of hashes by one of its keys: </p>


<p><code>
games = [<br>
{name: &ldquo;Super Metroid&rdquo;, console: &ldquo;Super Nintendo&rdquo;},<br>
{name: &ldquo;Toejam and Earl&rdquo;, console: &ldquo;Sega Genesis&rdquo;},<br>
{name: &ldquo;Earthbound&rdquo;, console: &ldquo;Super Nintendo&rdquo;},<br>
{name: &ldquo;Michael Jackson&rsquo;s Moonwalker&rdquo;, console: &ldquo;Sega Genesis&rdquo;},<br>
{name: &ldquo;PaRappa The Rapper&rdquo;, console: &ldquo;Playstation&rdquo;},<br>
{name: &ldquo;Pokémon Snap&rdquo;, console: &ldquo;Nintendo 64&rdquo;},<br>
{name: &ldquo;Tony Hawk&rsquo;s Pro Skater&rdquo;, console: &ldquo;Playstation&rdquo;}<br>
{name: &ldquo;Goldeneye&rdquo;, console: &ldquo;Nintendo 64&rdquo;}<br>
]
<br>
<br>
games.group_by{|game| game[:console]}
</code></p>

<p>returns:
<br>
<code>
 {&ldquo;Super Nintendo&rdquo;=>[<br>
 &nbsp;&nbsp;{:name=>&ldquo;Super Metroid&rdquo;, :console=>&ldquo;Super Nintendo&rdquo;},<br>
 &nbsp;&nbsp;{:name=>&ldquo;Earthbound&rdquo;, :console=>&ldquo;Super Nintendo&rdquo;}<br>
 ], <br>
 &ldquo;Sega Genesis&rdquo;=>[<br>
 &nbsp;&nbsp;{:name=>&ldquo;Toejam and Earl&rdquo;, :console=>&ldquo;Sega Genesis&rdquo;},<br>
 &nbsp;&nbsp;{:name=>&ldquo;Michael Jackson&rsquo;s Moonwalker&rdquo;, :console=>&ldquo;Sega Genesis&rdquo;}<br>
 ],<br>
&ldquo;Playstation&rdquo;=>[<br>
&nbsp;&nbsp;{:name=>&ldquo;PaRappa The Rapper&rdquo;, :console=>&ldquo;Playstation&rdquo;},<br>
&nbsp;&nbsp;{:name=>&ldquo;Tony Hawk&rsquo;s Pro Skater&rdquo;, :console=>&ldquo;Playstation&rdquo;}],<br>
&ldquo;Nintendo 64&rdquo;=>[<br>
&nbsp;&nbsp;{:name=>&ldquo;Pokémon Snap&rdquo;, :console=>&ldquo;Nintendo 64&rdquo;},<br>
&nbsp;&nbsp;{:name=>&ldquo;Goldeneye&rdquo;, :console=>&ldquo;Nintendo 64&rdquo;}<br>
]}
</code></p>

<p>In conclusion, enumerables are powerful methods that allow you to extract the most likely data you want to get from an array or hash, if you know how to use them properly. Nearly all of them can be recreated with an #each loop, but enumerables can save numerous lines of code and consolidate the logic of your program. Enumerables seem like a shortcut, but you can end up in a lot of trouble if you don&rsquo;t know exactly what you&rsquo;re using them for. I&rsquo;m glad we reconstructed some of the enumerables in class last week so that I could get a better understanding of the more exotic enumerables available in Ruby.</p>
]]></content>
  </entry>
  
</feed>
